def JENKINS_SLAVE_IMAGE = "maven36"
pipeline {
  agent {
    kubernetes {
      label "maven36-custom"
      cloud "openshift"
      inheritFrom "maven"
      containerTemplate {
        name "jnlp"
        image "image-registry.openshift-image-registry.svc:5000/ci-cd/${JENKINS_SLAVE_IMAGE}:latest"
        resourceRequestMemory "1Gi"
        resourceLimitMemory "2Gi"
        resourceRequestCpu "1"
        resourceLimitCpu "2"
      }
    }
  }
  options {
    // set a timeout of 30 minutes for this pipeline
    timeout(time: 40, unit: 'MINUTES')
  }
  environment {
    //mvnCmd = "source /usr/local/bin/scl_enable && mvn -s ./nexus_settings.xml"
    mvnCmd = "source /usr/local/bin/scl_enable && mvn "
    // mvnCmd ="mvn -s ./nexus_settings.xml "
    //mvnCmd = "mvn "
    imageName = "backend"
    devTag = "0.0-0"
  }
  stages {
    // Checkout Source Code.
    // stage('Checkout Source') {
    //   steps {
    //     echo "imageName: ${imageName}"
    //     echo "CICD Project: ${env.CICD_PROJECT}"
    //     echo "Dev Project: ${env.DEV_PROJECT}"
    //     //echo "prodProject: ${prodProject}"
    //     checkout scm
    //     dir('code') {
    //       script {
    //         def pom = readMavenPom file: 'pom.xml'
    //         def version = pom.version
    //         echo "version: ${version}"
    //         // Set the tag for the development image: version + build number
    //         devTag = "${version}-" + currentBuild.number
    //         echo "devTag: ${devTag}"

    //         // Patch Source artifactId to include GUID
    //         //sh "sed -i 's/GUID/${GUID}/g' ./pom.xml"
    //       }
    //     }
    //   }
    // }
    // Using Maven run the unit tests
    // stage('Unit Tests') {
    //   steps {
    //     dir('code') {
    //       echo "Running Unit Tests"
    //       sh "${mvnCmd} test"
    //       step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
    //     }
    //   }
    // }
    // Using Maven call SonarQube for Code Analysis
    // stage('Code Analysis') {
    //   steps {
    //     dir('code') {
    //       script {
    //         echo "Running Code Analysis"
    //         sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${sonarURL} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag} -Dsonar.projectVersion=${devTag}"
    //       }
    //     }
    //   }
    // }
    // Build the JAR
    stage('Build Binary') {
      steps {

        dir('code') {

          echo "Building ${imageName}:${devTag}"

          // echo "${mvnCmd} -v"
          script {
            def check = sh(script: 'ls -ltr /tmp/apache-maven-3.6.3/bin/mvn', returnStdout: true)
            echo "Check: ${check}"
            def mvnVersion = sh(script: '${mvnCmd} -version', returnStdout: true)
            //def mvnLocation = sh(script: 'which ${mvnCmd}', returnStdout: true)
            echo "Maven Version: ${mvnVersion}"
            //echo "Maven Location: ${mvnLocation}"
           
            //sh "${mvnCmd} clean package -DskipTests=true"
          }
        }
      }
    }
    // Create Build Config
    // stage('Create Build Config') {
    //   when {
    //     expression {
    //       openshift.withCluster() {
    //         openshift.withProject(env.CICD_PROJECT) {
    //           return !openshift.selector("bc", "${imageName}").exists()
    //         }
    //       }
    //     }
    //   }
    //   steps {
    //     echo "Create build config ${imageName}"
    //     script {
    //       openshift.withCluster() {
    //         openshift.withProject(env.CICD_PROJECT) {
    //           openshift.newBuild(
    //             "--name=${imageName}",
    //             "--to=${imageName}:latest",
    //             "--strategy=docker",
    //             // "--image-stream=nodejs:${baseImageVersion}", 
    //             "--binary=true"
    //           )
    //           def bc = openshift.selector("bc/${imageName}").object()
    //           bc.spec.strategy.dockerStrategy.dockerfilePath = "src/main/docker/Dockerfile.jvm"
    //           openshift.apply(bc)
    //         }
    //       }
    //     }
    //   }
    // }
    // Build Container Image
    // stage('Build Container Image') {
    //   steps {
    //     echo "Build Container Image ${imageName}"
    //     dir('code') {
    //       script {
    //         openshift.withCluster() {
    //           openshift.withProject(env.CICD_PROJECT) {
    //             openshift.startBuild(
    //               "${imageName}",
    //               "--from-dir=.",
    //               "--wait"
    //             )
    //             openshift.tag("${imageName}:latest", "${imageName}:${devTag}")
    //           }
    //         }
    //       }
    //     }
    //   }
    // }
    // stage('Create Deployment Config - Dev') {
    //   steps {
    //     echo "Create deployment config: env.DEV_PROJECT"
    //     script {
    //       openshift.withCluster() {
    //         openshift.withProject(env.DEV_PROJECT) {
    //           def template = './manifests/backend-dc-dev.yaml'
    //           openshift.apply(
    //             openshift.process(
    //               "-f", template,
    //               "-p", "APP_VERSION=${devTag}"
    //             )
    //           )
    //           //openshift.selector("dc", "${imageName}").rollout().pause();
    //         }
    //       }
    //     }

    //   }
    // }
    // stage('Create Service'){
    //   when{
    //     expression{
    //       openshift.withCluster(){
    //         openshift.withProject(env.DEV_PROJECT){
    //           return !openshift.selector("svc","${appName}").exists()
    //         }
    //       }
    //     }
    //   }
    //   steps {
    //     script {
    //       openshift.withCluster() {
    //         openshift.withProject(env.DEV_PROJECT) {
    //           def template = 'https://gitlab.com/ocp-demo/frontend-js-cicd/raw/master/templates/deploy-dev/service.yml'
    //           openshift.apply(
    //             openshift.process("-f", template)
    //           )
    //         }
    //       }
    //     }
    //   }
    // }
  }
}