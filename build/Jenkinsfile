def CICD = "ci-cd"
def JENKINS_SLAVE_IMAGE = "mvn-with-skopeo"
def SOURCE_CODE_DIR = "code"
pipeline {
  agent {
    kubernetes {
      label "${JENKINS_SLAVE_IMAGE}"
      cloud "openshift"
      inheritFrom "maven"
      containerTemplate {
        name "jnlp"
        image "image-registry.openshift-image-registry.svc:5000/ci-cd/${JENKINS_SLAVE_IMAGE}:latest"
        resourceRequestMemory "1Gi"
        resourceLimitMemory "2Gi"
        resourceRequestCpu "1"
        resourceLimitCpu "2"
      }
    }
  }
  options {
    // set a timeout of 30 minutes for this pipeline
    timeout(time: 30, unit: 'MINUTES')
  }
  environment {
    // NOTE: Somehow an inline pod template in a declarative pipeline
    //       needs the "scl_enable" before calling maven.
    sonarURL = "http://sonarqube:9000"
    nexusSvc = "http://homework-nexus.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
    nexusContainerSvc = "docker://homework-nexus-registry.gpte-hw-cicd.svc.cluster.local:5000"
    nexusURL = "https://homework-nexus.apps.shared.na.openshift.opentlc.com"
    mvnCmd = "source /usr/local/bin/scl_enable && mvn -s ./nexus_settings.xml"
    //mvnCmd = "source /usr/local/bin/scl_enable && mvn "
    // Images and Projects
    imageName = "backend"
    devProject = "dev"
    prodProject = ""
    // Tags
    devTag = "0.0-0"
    prodTag = "0.0"

    // Blue-Green Settings
    destApp = "backend-green"
    activeApp = ""
  }
  stages {
    // Checkout Source Code.
    stage('Checkout Source') {
      steps {
        echo "imageName: ${imageName}"
        echo "devProject: ${devProject}"
        //echo "prodProject: ${prodProject}"
        checkout scm
        dir('code') {
          script {
            def pom = readMavenPom file: 'pom.xml'
            def version = pom.version
            echo "version: ${version}"
            // Set the tag for the development image: version + build number
            devTag = "${version}-" + currentBuild.number
            // Set the tag for the production image: version
            prodTag = "${version}"
            echo "devTag: ${devTag}"
            echo "prodTag: ${prodTag}"
            // Patch Source artifactId to include GUID
            //sh "sed -i 's/GUID/${GUID}/g' ./pom.xml"
          }
        }
      }
    }
    // Using Maven run the unit tests
    stage('Unit Tests') {
      steps {
        dir('code') {
          echo "Running Unit Tests"
          sh "${mvnCmd} test"
          step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
        }
      }
    }
    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
      steps {
        dir('code') {
          script {
            echo "Running Code Analysis"
            sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${sonarURL} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag} -Dsonar.projectVersion=${devTag}"
          }
        }
      }
    }
    // Build the JAR
    stage('Build Binary') {
      steps {
        dir('code') {
          echo "Building version ${devTag}"
          script {
            sh "${mvnCmd} clean package -DskipTests=true"
          }
        }
      }
    }
    stage('Create Image Builder') {
      // when {
      //   expression {
      //     openshift.withCluster() {
      //       openshift.withProject("${CICD}") {
      //         return !openshift.selector("bc", "${imageName}").exists()
      //       }
      //     }
      //   }
      // }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject("${CICD}") {
              def template = 'https://gitlab.com/ocp-demo/backend_quarkus/raw/master/manifests/backend-bc-dev.yaml'
              openshift.apply(
                openshift.process(
                  "-f", template,
                  // "-p", "IMAGE_NAMESPACE=${imageNamespace}", 
                  // "-p", "IMAGE_VERSION=${imageVersion}", 
                  // "-p", "APP_VERSION=${version}",
                  "-p", "APP_VERSION=${devTag}"
                )
              )
            }
          }
        }
      }
    }
    stage('Build Image') {
      steps {
        dir('code') {
          script {
            openshift.withCluster() {
              openshift.withProject("${CICD}") {
                openshift.startBuild(
                  "${imageName}",
                  "--from-dir=.",
                  "--wait"
                )
              }
            }
          }
        }
      }
    }
    // stage('Deploy to Dev') {
    //   steps {
    //     dir('openshift-tasks') {
    //       echo "Deploying container image to Development Project with image ${imageName}:${devTag}"

    //       // script {

    //       //   // TBD: Deploy to development Project
    //       //   //      Set Image, Set VERSION
    //       //   //      (Re-) Create ConfigMap
    //       //   //      Make sure the application is running and ready before proceeding

    //       // }
    //       script {
    //         openshift.withCluster() {
    //           openshift.withProject("${devProject}") {
    //             // OpenShift 4
    //             openshift.set(
    //               "image",
    //               "dc/tasks",
    //               "tasks=image-registry.openshift-image-registry.svc:5000/${devProject}/${imageName}:${devTag}"
    //             )
    //             openshift.selector('configmap', 'tasks-config').delete()
    //             def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties')

    //             // Deploy the development application.
    //             openshift.selector("dc", "tasks").rollout().latest();

    //             // Wait for application to be deployed
    //             def dc = openshift.selector("dc", "tasks").object()
    //             def dc_version = dc.status.latestVersion
    //             def rc = openshift.selector("rc", "tasks-${dc_version}").object()

    //             echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
    //             while (rc.spec.replicas != rc.status.readyReplicas) {
    //               sleep 5
    //               rc = openshift.selector("rc", "tasks-${dc_version}").object()
    //             }
    //           }
    //         }
    //       }

    //     }
    //   }
    // }


    //Publish the built war file to Nexus
    // stage('Publish to Nexus') {
    //   steps {
    //     dir('openshift-tasks') {
    //       echo "Publish to Nexus"
    //       // TBD: Publish to Nexus
    //       sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${nexusSvc}"
    //     }
    //   }
    // }
    //Build the OpenShift Image in OpenShift and tag it.
    // stage('Build and Tag OpenShift Image') {
    //   steps {
    //     dir('openshift-tasks') {
    //       echo "Building OpenShift container image ${imageName}:${devTag} in project ${devProject}."
    //       script {
    //         openshift.withCluster() {
    //           openshift.withProject("${devProject}") {
    //             openshift.selector("bc", "tasks").startBuild("--from-file=./target/openshift-tasks.war", "--wait=true")
    //             // Recheck tag for dev
    //             openshift.tag("${imageName}:latest", "${imageName}:${devTag}")
    //           }
    //         }
    //       }
    //     }
    //   }
    // }
    // Deploy the built image to the Development Environment.
    // stage('Deploy to Dev') {
    //   steps {
    //     dir('openshift-tasks') {
    //       echo "Deploying container image to Development Project with image ${imageName}:${devTag}"

    //       // script {

    //       //   // TBD: Deploy to development Project
    //       //   //      Set Image, Set VERSION
    //       //   //      (Re-) Create ConfigMap
    //       //   //      Make sure the application is running and ready before proceeding

    //       // }
    //       script {
    //         openshift.withCluster() {
    //           openshift.withProject("${devProject}") {
    //             // OpenShift 4
    //             openshift.set(
    //               "image",
    //               "dc/tasks",
    //               "tasks=image-registry.openshift-image-registry.svc:5000/${devProject}/${imageName}:${devTag}"
    //             )
    //             openshift.selector('configmap', 'tasks-config').delete()
    //             def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties')

    //             // Deploy the development application.
    //             openshift.selector("dc", "tasks").rollout().latest();

    //             // Wait for application to be deployed
    //             def dc = openshift.selector("dc", "tasks").object()
    //             def dc_version = dc.status.latestVersion
    //             def rc = openshift.selector("rc", "tasks-${dc_version}").object()

    //             echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
    //             while (rc.spec.replicas != rc.status.readyReplicas) {
    //               sleep 5
    //               rc = openshift.selector("rc", "tasks-${dc_version}").object()
    //             }
    //           }
    //         }
    //       }

    //     }
    //   }
    // }

    // Copy Image to Nexus Container Registry
    // stage('Copy Image to Nexus Container Registry') {
    //   steps {
    //     echo "Copy image to Nexus Container Registry"
    //     script {
    //       sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat docker://image-registry.openshift-image-registry.svc.cluster.local:5000/${devProject}/${imageName}:${devTag} ${nexusContainerSvc}/${imageName}:${devTag}"

    //       // Tag the built image with the production tag.
    //       openshift.withCluster() {
    //         openshift.withProject("${prodProject}") {
    //           openshift.tag("${devProject}/${imageName}:${devTag}", "${devProject}/${imageName}:${prodTag}")
    //         }
    //       }
    //     }
    //   }
  }

}