import java.text.SimpleDateFormat
ef JENKINS_SLAVE_IMAGE = "maven36-with-tools"
// def appName = "frontend"
// def imageNamespace = "ci-cd"
// def baseImageVersion
// def backendURL = "https://httpbin.org/status/200"
// def basePath = "https://gitlab.com/ocp-demo/frontend-js-cicd/raw/master"
// def releaseTag
// def version

pipeline {
  agent {
    kubernetes {
      label "maven36-with-tools"
      cloud "openshift"
      inheritFrom "maven"
      containerTemplate {
        name "jnlp"
        image "image-registry.openshift-image-registry.svc:5000/ci-cd/${JENKINS_SLAVE_IMAGE}:latest"
        resourceRequestMemory "600Mi"
        resourceLimitMemory "2Gi"
        resourceRequestCpu "1"
        resourceLimitCpu "2"
      }
    }
  }
  options {
    // set a timeout of 20 minutes for this pipeline
    timeout(time: 20, unit: 'MINUTES')
  }
  environment {
    //mvnCmd = "/opt/apache-maven-3.6.3/bin/mvn "
    mvnCmd ="/opt/apache-maven-3.6.3/bin/mvn -s ./nexus_settings.xml "
    def dateFormat = new SimpleDateFormat("yyyyMMdd")
    def date = new Date()
    def releaseDate = (dateFormat.format(date))
  releaseTag = releaseDate + "-" + env.BUILD_NUMBER
  }
  stages {
    stage('Choose Staging Version') {
      steps {
        script {
          openshift.withCluster() {
            namespace = openshift.project()
            def tags = openshift.selector("istag")
              .objects()
              .collect {
                it.metadata.name
              }
              .findAll {
                it.startsWith 'backend:'
              }
              .collect {
                it.replaceAll(/backend:(.*)/, "\$1")
              }
              .sort()
            timeout(5) {
              releaseTag = input(
                ok: "Deploy Staging",
                message: "Enter release version to promote to Staging",
                parameters: [
                  choice(
                    choices: tags.join('\n'),
                    description: '',
                    name: 'Release Version'
                  )
                ]
              )
            }
          }
          println "releaseTag = ${releaseTag}"
          version = releaseTag.split('-')[0]
          println "version = ${version}"
        }
      }
    }
    stage('Release Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.CICD_PROJECT) {
              println "Releasing image  ${version} ${releaseTag} to ${env.STAGE_CICD}"
              def tagStr = "oc tag " + env.CICD_PROJECT + "/" + appName + ":latest " + env.CICD_PROJECT + "/" + appName + ":" + version + "-" + releaseTag
              println tagStr
              //openshift.tag(tagStr)
              sh(script: tagStr)
            }
          }
        }
      }
    }
    // stage('Tear-Down Stage') {
    //   steps {
    //     script {
    //       openshift.withCluster() {
    //         openshift.withProject(env.STAGE_PROJECT) {
    //           println "Tear-Down project ${env.STAGE_PROJECT}"
    //           openshift.raw("delete all -l app=${appName}")
    //         }
    //       }
    //     }
    //   }
    // }
    // stage('Deploy Staging') {
    //   steps {
    //     script {
    //       openshift.withCluster() {
    //         openshift.withProject(env.STAGE_PROJECT) {
    //           println "Deploy project ${env.STAGE_PROJECT}"
    //           def template = "${basePath}/templates/deploy-sit/frontend-sit-template.yml"
    //           openshift.apply(
    //             openshift.process(
    //               "-f", template,
    //               "-p", "IMAGE_NAMESPACE=${imageNamespace}",
    //               "-p", "IMAGE_VERSION=${version}-${releaseTag}",
    //               "-p", "APP_VERSION=${version}",
    //               "-p", "BACKEND_URL=${backendURL}"
    //             )
    //           )
    //         }
    //       }
    //     }
    //   }
    // }
   }
}
