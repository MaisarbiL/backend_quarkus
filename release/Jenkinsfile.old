import java.text.SimpleDateFormat
def imageName = "backend"
def imageNamespace = "ci-cd"
def baseImageVersion
def releaseTag
def version
def CICD = "ci-cd"
def JENKINS_SLAVE_IMAGE = "mvn-with-skopeo"

pipeline {
  agent {
    kubernetes {
      label "${JENKINS_SLAVE_IMAGE}"
      cloud "openshift"
      inheritFrom "maven"
      containerTemplate {
        name "jnlp"
        image "image-registry.openshift-image-registry.svc:5000/ci-cd/${JENKINS_SLAVE_IMAGE}:latest"
        resourceRequestMemory "1Gi"
        resourceLimitMemory "2Gi"
        resourceRequestCpu "1"
        resourceLimitCpu "2"
      }
    }
  }
  options {
    // set a timeout of 20 minutes for this pipeline
    timeout(time: 20, unit: 'MINUTES')
  }
  environment {
    def dateFormat = new SimpleDateFormat("MMdd")
    def date = new Date()
    def releaseDate = (dateFormat.format(date))
    releaseTag = releaseDate + "-" + env.BUILD_NUMBER

    nexusSvc = "http://nexus:8081/repository/releases"
    nexusContainerSvc = "docker://nexus:5000"
    //nexusURL = "https://homework-nexus.apps.shared.na.openshift.opentlc.com"
    //mvnCmd = "source /usr/local/bin/scl_enable && mvn -s ./nexus_settings.xml"
    mvnCmd = "source /usr/local/bin/scl_enable && mvn "
    // Images and Projects
    imageName = "backend"
    // Tags
    devTag = ""
    currentImage = ""


  }
  stages {
    stage('Checkout Source') {
      steps {
        echo "imageName: ${imageName}"
        echo "CICD Project: ${env.CICD_PROJECT}"
        echo "Dev Project: ${env.DEV_PROJECT}"
        //echo "prodProject: ${prodProject}"
        checkout scm
        dir('code') {
          script {
            def pom = readMavenPom file: 'pom.xml'
            def version = pom.version
            echo "version: ${version}"
            // Set the tag for the development image: version + build number
            devTag = "${version}-" + currentBuild.number            
            echo "devTag: ${devTag}"

            // Patch Source artifactId to include GUID
            //sh "sed -i 's/GUID/${GUID}/g' ./pom.xml"
          }
        }
      }
    }
    stage('Check Dev Version'){
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
                 currentImage = openshift.selector("dc/${imageName}").object().spec.template.spec.containers[0].image
                 echo "Current Image: ${currentImage}"
                //spec.template.spec.containers[0].image
                //def activeApp = openshift.selector("route", "tasks").object().spec.to.name
            }
        }
      }
    }
    // stage('Release Image') {
    //   steps {
    //     script {
    //       openshift.withCluster() {
    //         openshift.withProject(env.CICD_PROJECT) {
    //           println "Releasing image  ${version} ${releaseTag} to ${env.CICD_PROJECT}"
    //           def tagStr = "oc tag " + env.CICD_PROJECT + "/" + imageName + ":latest " + env.CICD_PROJECT + "/" + imageName + ":" + version + "-" + releaseTag
    //           println tagStr
    //           //openshift.tag(tagStr)
    //           sh(script: tagStr)
    //         }
    //       }
    //     }
    //   }
    // }
    // stage('Publish to Nexus') {
    //   steps {
    //     script {

    //     }
    //   }
    // }

    // stage('Tear-Down Stage') {
    //   steps {
    //     script {
    //       openshift.withCluster() {
    //         openshift.withProject(env.STAGE_PROJECT) {
    //           println "Tear-Down project ${env.STAGE_PROJECT}"
    //           openshift.raw("delete all -l app=${imageName}")
    //         }
    //       }
    //     }
    //   }
    // }
    // stage('Deploy Staging') {
    //   steps {
    //     script {
    //       openshift.withCluster() {
    //         openshift.withProject(env.STAGE_PROJECT) {
    //           println "Deploy project ${env.STAGE_PROJECT}"
    //           def template = "${basePath}/templates/deploy-sit/frontend-sit-template.yml"
    //           openshift.apply(
    //             openshift.process(
    //               "-f", template,
    //               "-p", "IMAGE_NAMESPACE=${imageNamespace}",
    //               "-p", "IMAGE_VERSION=${version}-${releaseTag}",
    //               "-p", "APP_VERSION=${version}",
    //               "-p", "BACKEND_URL=${backendURL}"
    //             )
    //           )
    //         }
    //       }
    //     }
    //   }
    // }
  }
}